#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================
ynh_script_progression --message="Loading installation settings..."

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get --app=$app --key=domain)
path_url=$(ynh_app_setting_get --app=$app --key=path)
final_path=$(ynh_app_setting_get --app=$app --key=final_path)

focus_user=$(ynh_app_setting_get --app=$app --key=focus_user)
focus_password=$(ynh_app_setting_get --app=$app --key=focus_password)
focus_secret=$(ynh_app_setting_get --app=$app --key=focus_secret)

videobridge_user=$(ynh_app_setting_get --app=$app --key=videobridge_user)
videobridge_secret=$(ynh_app_setting_get --app=$app --key=videobridge_secret)

port=$(ynh_app_setting_get --app=$app --key=port)
port_videobridge=$(ynh_app_setting_get --app=$app --key=port_videobridge)
port_component=$(ynh_app_setting_get --app=$app --key=port_component)

#=================================================
# CHECK VERSION
#=================================================
ynh_script_progression --message="Checking version..."

upgrade_type=$(ynh_check_app_version_changed)
current_version=$(ynh_read_manifest --manifest="/etc/yunohost/apps/$app/manifest.json" --manifest_key="version" || echo 1.0)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================
ynh_script_progression --message="Ensuring downward compatibility..."

# If final_path doesn't exist, create it
if [ -z "$final_path" ]; then
	final_path=/var/www/$app
	ynh_app_setting_set --app=$app --key=final_path --value=$final_path
fi

if ynh_version_gt "1.0.3387~ynh2" "${current_version}" ; then
    # Add Metronome domain conf template
    metronome_conf="/usr/share/yunohost/templates/jitsi/$domain.cfg.lua"
    mkdir -p /usr/share/yunohost/templates/jitsi/
    cp ../conf/metronome.cfg.lua $metronome_conf
    ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$metronome_conf"
    ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="$metronome_conf"
    ynh_replace_string --match_string="__FOCUS_SECRET__" --replace_string="$focus_secret" --target_file="$metronome_conf"
    ynh_replace_string --match_string="__PORT_COMPONENT__" --replace_string="$port_component" --target_file="$metronome_conf"

    touch "/usr/share/yunohost/templates/jitsi/auth.$domain.cfg.lua"
    touch "/usr/share/yunohost/templates/jitsi/conference.$domain.cfg.lua"
    touch "/usr/share/yunohost/templates/jitsi/jitsi-videobridge.$domain.cfg.lua"
    touch "/usr/share/yunohost/templates/jitsi/focus.$domain.cfg.lua"

    # Add Metronome hook 
    cp -R ../conf/metronome_regen_conf.hook /usr/share/yunohost/hooks/conf_regen/50-metronome_$app
    
    yunohost tools regen-conf metronome --force
fi

if ynh_version_gt "1.0.3969~ynh1" "${current_version}" ; then
    # Remove not needed domains
    yunohost domain remove conference.$domain
    yunohost domain remove jitsi-videobridge.$domain
    yunohost domain remove focus.$domain
	
	# Remove Previously installed Metronome modules
	ynh_secure_remove --file="/usr/lib/metronome/modules/mod_carbons.lua"
	ynh_secure_remove --file="/usr/lib/metronome/modules/mod_http_altconnect.lua"
	ynh_secure_remove --file="/usr/lib/metronome/modules/mod_smacks.lua"

	# Remove nodejs
	ynh_remove_nodejs
fi

# Closing port_component
if yunohost firewall list | grep -q "\- $port_component$"
then
	ynh_script_progression --message="Closing port $port_component..."
	ynh_exec_warn_less yunohost firewall disallow TCP $port_component
fi


#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================
ynh_script_progression --message="Backing up the app before upgrading (may take a while)..."

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
	ynh_clean_check_starting
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# STOP SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Stopping a systemd service..."

ynh_systemd_action --service_name=$app-videobridge --action="stop" --log_path="/var/log/$app/$app-videobridge.log"
ynh_systemd_action --service_name=$app-jicofo --action="stop" --log_path="/var/log/$app/$app-jicofo.log"

#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	ynh_script_progression --message="Upgrading source files..."

	# Download, check integrity, uncompress and patch the source from app.src
	declare -A packages
	packages[jicofo]="jicofo"
	packages[jitsi-meet-prosody]="jitsi-meet/prosody-plugins"
	packages[jitsi-meet-web]="jitsi-meet"
	packages[jitsi-videobridge]="jitsi-videobridge"

	for package in "${!packages[@]}"
	do
		ynh_secure_remove --file="$final_path/${package}"
		ynh_setup_source --dest_dir="$final_path/${package}_temp" --source_id=$package
		pushd "$final_path/${package}_temp"
			ar x $package.deb data.tar.xz
			tar xf data.tar.xz
		popd

		mv "$final_path/${package}_temp/usr/share/${packages[$package]}/" "$final_path/${package}/"
		ynh_secure_remove --file="$final_path/${package}_temp"
	done

	# Adapt prosody module to metronome
	for file in $final_path/jitsi-meet-prosody/*.lua
	do
		ynh_replace_string --match_string="prosody" --replace_string="metronome" --target_file="$file"
		ynh_replace_string --match_string="Prosody" --replace_string="Metronome" --target_file="$file"
	done

	for directory in $final_path/jitsi-meet-prosody/*/; do
    	for file in $directory/*.lua
    	do
			ynh_replace_string --match_string="prosody" --replace_string="metronome" --target_file="$file"
			ynh_replace_string --match_string="Prosody" --replace_string="Metronome" --target_file="$file"
		done
	done
fi

#=================================================
# NGINX CONFIGURATION
#=================================================
ynh_script_progression --message="Upgrading nginx web server configuration..."

# Create a dedicated nginx config
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================
ynh_script_progression --message="Upgrading dependencies..."

ynh_install_app_dependencies $pkg_dependencies

#ynh_install_nodejs --nodejs_version=10

#=================================================
# CREATE DEDICATED USER
#=================================================
ynh_script_progression --message="Making sure dedicated system user exists..."

# Create a dedicated user (if not existing)
ynh_system_user_create --username=$app --home_dir=$final_path

#=================================================
# SPECIFIC UPGRADE
#=================================================
# CONFIGURE JITSI-VIDEOBRIDGE
#=================================================
ynh_script_progression --message="Configuring Jitsi-Videobridge..."

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	public_ipv4="$(curl ip.yunohost.org)" || true
	private_ipv4="$(ip route get 1 | sed -n 's/^.*src \([0-9.]*\) .*$/\1/p')" || true

	jitsi_videobridge_sip_communicator_conf="/etc/$app/videobridge/sip-communicator.properties"
	ynh_backup_if_checksum_is_different --file="$jitsi_videobridge_sip_communicator_conf"
	cp -f ../conf/jitsi_videobridge-sip-communicator.properties "$jitsi_videobridge_sip_communicator_conf"
	ynh_replace_string --match_string="__PORT__" --replace_string="$port" --target_file="$jitsi_videobridge_sip_communicator_conf"
	ynh_replace_string --match_string="__PRIVATE_IPV4__" --replace_string="$private_ipv4" --target_file="$jitsi_videobridge_sip_communicator_conf"
	ynh_replace_string --match_string="__PUBLIC_IPV4__" --replace_string="$public_ipv4" --target_file="$jitsi_videobridge_sip_communicator_conf"
	ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$jitsi_videobridge_sip_communicator_conf"
	ynh_replace_string --match_string="__VIDEOBRIDGE_USER__" --replace_string="$videobridge_user" --target_file="$jitsi_videobridge_sip_communicator_conf"
	ynh_replace_string --match_string="__VIDEOBRIDGE_SECRET__" --replace_string="$videobridge_secret" --target_file="$jitsi_videobridge_sip_communicator_conf"
	ynh_replace_string --match_string="__MUC_NICKNAME__" --replace_string="$muc_nickname" --target_file="$jitsi_videobridge_sip_communicator_conf"
	ynh_store_file_checksum --file="$jitsi_videobridge_sip_communicator_conf"

	jitsi_videobridge_conf="/etc/$app/videobridge/config"
	ynh_backup_if_checksum_is_different --file="$jitsi_videobridge_conf"
	cp ../conf/jitsi-videobridge.config "$jitsi_videobridge_conf"
	ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$jitsi_videobridge_conf"
	ynh_replace_string --match_string="__PORT_COMPONENT__" --replace_string="$port_component" --target_file="$jitsi_videobridge_conf"
	ynh_replace_string --match_string="__VIDEOBRIDGE_SECRET__" --replace_string="$videobridge_secret" --target_file="$jitsi_videobridge_conf"
	ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="$jitsi_videobridge_conf"
	ynh_store_file_checksum --file="$jitsi_videobridge_conf"

	jitsi_videobridge_logging_conf="/etc/$app/videobridge/logging.properties"
	ynh_backup_if_checksum_is_different --file="$jitsi_videobridge_logging_conf"
	cp ../conf/jitsi-videobridge-logging.properties "$jitsi_videobridge_logging_conf"
	ynh_store_file_checksum --file="$jitsi_videobridge_logging_conf"

	jitsi_videobridge_callstats_java_sdk_conf="/etc/$app/videobridge/callstats-java-sdk.properties"
	cp ../conf/jitsi-videobridge-callstats-java-sdk.properties "$jitsi_videobridge_callstats_java_sdk_conf"

	jitsi_videobridge_log4j2_conf="/etc/$app/videobridge/log4j2.xml"
	cp ../conf/jitsi-videobridge-log4j2.xml "$jitsi_videobridge_log4j2_conf"
	ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="$jitsi_videobridge_log4j2_conf"

	jitsi_videobridge_20_jvb_udp_buffers_conf="/etc/sysctl.d/videobridge/20-jvb-udp-buffers.conf"
	cp ../conf/jitsi-videobridge-20-jvb-udp-buffers.conf "$jitsi_videobridge_20_jvb_udp_buffers_conf"
	sysctl --system || true
fi

#=================================================
# CONFIGURE JITSI-JICOFO
#=================================================
ynh_script_progression --message="configuring Jitsi-Jicofo..."

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	jitsi_jicofo_sip_communicator_conf="/etc/$app/jicofo/sip-communicator.properties"
	ynh_backup_if_checksum_is_different --file="$jitsi_jicofo_sip_communicator_conf"
	cp ../conf/jitsi-jicofo-sip-communicator.properties "$jitsi_jicofo_sip_communicator_conf"
	ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$jitsi_jicofo_sip_communicator_conf"
	ynh_store_file_checksum --file="$jitsi_jicofo_sip_communicator_conf"

	jitsi_jicofo_conf="/etc/$app/jicofo/config"
	ynh_backup_if_checksum_is_different --file="$jitsi_jicofo_conf"
	cp ../conf/jitsi-jicofo.config "$jitsi_jicofo_conf"
	ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="$jitsi_jicofo_conf"
	ynh_replace_string --match_string="__PORT_COMPONENT__" --replace_string="$port_component" --target_file="$jitsi_jicofo_conf"
	ynh_replace_string --match_string="__FOCUS_SECRET__" --replace_string="$focus_secret" --target_file="$jitsi_jicofo_conf"
	ynh_replace_string --match_string="__FOCUS_USER__" --replace_string="$focus_user" --target_file="$jitsi_jicofo_conf"
	ynh_replace_string --match_string="__FOCUS_PASSWORD__" --replace_string="$focus_password" --target_file="$jitsi_jicofo_conf"
	ynh_replace_string --match_string="__APP__" --replace_string="$app" --target_file="$jitsi_jicofo_conf"
	ynh_store_file_checksum --file="$jitsi_jicofo_conf"

	jitsi_jicofo_logging_conf="/etc/$app/jicofo/logging.properties"
	ynh_backup_if_checksum_is_different --file="$jitsi_jicofo_logging_conf"
	cp ../conf/jitsi-jicofo-logging.properties "$jitsi_jicofo_logging_conf"
	ynh_store_file_checksum --file="$jitsi_jicofo_logging_conf"

fi

#=================================================
# CONFIGURE JITSI-MEET
#=================================================
ynh_script_progression --message="Configuring Jitsi-Meet..."

if [ "$upgrade_type" == "UPGRADE_APP" ]
then
	jitsi_meet_conf="/etc/$app/meet/config.js"
	ynh_backup_if_checksum_is_different --file="$jitsi_meet_conf"
	ynh_replace_string --match_string="__DOMAIN__" --replace_string="$domain" --target_file="../conf/config.js"
	cpp -undef -P ../conf/config.js -o "$jitsi_meet_conf"
	ynh_store_file_checksum --file="$jitsi_meet_conf"
fi

#=================================================
# SETUP SYSTEMD
#=================================================
ynh_script_progression --message="Upgrading systemd configuration..."

# Create a dedicated systemd config
ynh_add_systemd_config --service=$app-videobridge --template="jitsi-videobridge.service"
ynh_add_systemd_config --service=$app-jicofo --template="jitsi-jicofo.service"

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================
ynh_script_progression --message="Securing files and directories..."

# Set permissions on app files
chown -R root: $final_path
chown -R $app: /etc/$app
chown -R $app: /var/log/$app
chmod -R 770 /var/log/$app

#=================================================
# SETUP LOGROTATE
#=================================================
ynh_script_progression --message="Upgrading logrotate configuration..."

# Use logrotate to manage app-specific logfile(s)
ynh_use_logrotate --non-append

#=================================================
# INTEGRATE SERVICE IN YUNOHOST
#=================================================
ynh_script_progression --message="Integrating service in YunoHost..."

yunohost service add $app-videobridge --description "$app jitsi-videobridge for jitsi" --log "/var/log/$app/$app-videobridge.log"
yunohost service add $app-jicofo --description "$app jitsi-jicofo for jitsi" --log "/var/log/$app/$app-jicofo.log"

#=================================================
# START SYSTEMD SERVICE
#=================================================
ynh_script_progression --message="Starting a systemd service..."

ynh_systemd_action --service_name=$app-jicofo --action="start" --log_path="/var/log/$app/$app-jicofo.log"
ynh_systemd_action --service_name=$app-videobridge --action="start" --log_path="/var/log/$app/$app-videobridge.log"

#=================================================
# SETUP SSOWAT
#=================================================
ynh_script_progression --message="Upgrading SSOwat configuration..."

# Make app public
ynh_app_setting_set --app=$app --key=unprotected_uris --value="/"

#=================================================
# RELOAD NGINX
#=================================================
ynh_script_progression --message="Reloading nginx web server..."

ynh_systemd_action --service_name=nginx --action=reload

#=================================================
# END OF SCRIPT
#=================================================

ynh_script_progression --message="Upgrade of $app completed"
